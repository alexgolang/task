// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/alexgolang/ishare-task/internal/app/domain"
)

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (id, title, description, status, priority, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateTaskParams struct {
	ID          string              `json:"id"`
	Title       string              `json:"title"`
	Description sql.NullString      `json:"description"`
	Status      domain.TaskStatus   `json:"status"`
	Priority    domain.TaskPriority `json:"priority"`
	CreatedAt   time.Time           `json:"created_at"`
	UpdatedAt   time.Time           `json:"updated_at"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteTask = `-- name: DeleteTask :execrows
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteTask, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, status, priority, created_at, updated_at FROM tasks WHERE id = ?
`

func (q *Queries) GetTask(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, title, description, status, priority, created_at, updated_at FROM tasks
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks SET 
    title = COALESCE(NULLIF(?1, ''), title),
    description = COALESCE(?2, description),
    status = COALESCE(NULLIF(?3, ''), status),
    priority = COALESCE(NULLIF(?4, ''), priority),
    updated_at = ?5
WHERE id = ?6
`

type UpdateTaskParams struct {
	Title       interface{}    `json:"title"`
	Description sql.NullString `json:"description"`
	Status      interface{}    `json:"status"`
	Priority    interface{}    `json:"priority"`
	UpdatedAt   time.Time      `json:"updated_at"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
